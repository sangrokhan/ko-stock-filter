version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock-trading-db
    environment:
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: stock_password
      POSTGRES_DB: stock_trading
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stock-trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stock_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock-trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Collector Service
  data-collector:
    build:
      context: ..
      dockerfile: docker/Dockerfile.data_collector
    container_name: data-collector
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_password@postgres:5432/stock_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-trading-network
    restart: unless-stopped

  # Indicator Calculator Service
  indicator-calculator:
    build:
      context: ..
      dockerfile: docker/Dockerfile.indicator_calculator
    container_name: indicator-calculator
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_password@postgres:5432/stock_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-trading-network
    restart: unless-stopped

  # Stock Screener Service
  stock-screener:
    build:
      context: ..
      dockerfile: docker/Dockerfile.stock_screener
    container_name: stock-screener
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_password@postgres:5432/stock_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8003:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-trading-network
    restart: unless-stopped

  # Trading Engine Service
  trading-engine:
    build:
      context: ..
      dockerfile: docker/Dockerfile.trading_engine
    container_name: trading-engine
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_password@postgres:5432/stock_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8004:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-trading-network
    restart: unless-stopped

  # Risk Manager Service
  risk-manager:
    build:
      context: ..
      dockerfile: docker/Dockerfile.risk_manager
    container_name: risk-manager
    environment:
      - DATABASE_URL=postgresql://stock_user:stock_password@postgres:5432/stock_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8005:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-trading-network
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - stock-trading-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Performance Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - stock-trading-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  stock-trading-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
