name: Integration Tests

on:
  push:
    branches: [ main, develop, claude/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: stock_trading_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment variables
        run: |
          cat > .env.test << EOF
          TEST_DATABASE_URL=postgresql://test_user:test_password@localhost:5433/stock_trading_test
          TEST_DATA_COLLECTOR_URL=http://localhost:8101
          TEST_INDICATOR_CALCULATOR_URL=http://localhost:8102
          TEST_STOCK_SCREENER_URL=http://localhost:8103
          TEST_TRADING_ENGINE_URL=http://localhost:8104
          TEST_RISK_MANAGER_URL=http://localhost:8105
          LOG_LEVEL=DEBUG
          ENVIRONMENT=test
          PAPER_TRADING_MODE=true
          EOF

      - name: Initialize test database
        run: |
          python shared/database/init_db.py create
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/stock_trading_test

      - name: Build Docker images
        run: |
          cd docker
          docker-compose -f docker-compose.test.yml build

      - name: Start test services
        run: |
          cd docker
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30

          # Check service health
          for port in 8101 8102 8103 8104 8105; do
            echo "Checking service on port $port..."
            for i in {1..30}; do
              if curl -sf http://localhost:$port/health > /dev/null 2>&1; then
                echo "✓ Service on port $port is ready"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "✗ Service on port $port failed to start"
                docker-compose -f docker/docker-compose.test.yml logs
                exit 1
              fi
              sleep 2
            done
          done

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v \
            --cov=services \
            --cov=shared \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit.xml
        env:
          TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5433/stock_trading_test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage.xml
          flags: integration
          name: integration-tests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            junit.xml
            htmlcov/

      - name: View service logs on failure
        if: failure()
        run: |
          cd docker
          docker-compose -f docker-compose.test.yml logs

      - name: Stop test services
        if: always()
        run: |
          cd docker
          docker-compose -f docker-compose.test.yml down -v

  integration-tests-summary:
    name: Integration Tests Summary
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✓ All integration tests passed"
          else
            echo "✗ Integration tests failed"
            exit 1
          fi
